use crate::components::{Displayed, Named, Positioned};
use crate::ecs::{AwareOfComponent, HasComponent};

// ECS: components' types are parameters when defining new entity
pub struct Player {
    named: Named,
    positioned: Positioned,
    displayed: Displayed,
}

impl Player {
    pub fn new(named: Named, positioned: Positioned, displayed: Displayed) -> Self {
        Self { named, positioned, displayed }
    }
}

// ECS: easily autogenerated code
impl HasComponent<Named> for Player {
    fn get_component_raw(&mut self) -> &mut Named {
        &mut self.named
    }
}

impl HasComponent<Positioned> for Player {
    fn get_component_raw(&mut self) -> &mut Positioned {
        &mut self.positioned
    }
}

impl HasComponent<Displayed> for Player {
    fn get_component_raw(&mut self) -> &mut Displayed {
        &mut self.displayed
    }
}

// ECS: still easily autogenerated
impl AwareOfComponent<Named> for Player {
    fn try_get_component_raw(&mut self) -> Option<&mut Named> {
        Some(&mut self.named)
    }
}

impl AwareOfComponent<Positioned> for Player {
    fn try_get_component_raw(&mut self) -> Option<&mut Positioned> {
        Some(&mut self.positioned)
    }
}

impl AwareOfComponent<Displayed> for Player {
    fn try_get_component_raw(&mut self) -> Option<&mut Displayed> {
        Some(&mut self.displayed)
    }
}