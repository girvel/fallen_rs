use crate::components::{Entity, Positioned};
use crate::ecs::{CanRegister, HasComponent, component_mut};
use crate::entities::{Player, Ghost};


fn gravitate_down<
    T: HasComponent<Positioned> + Entity
>(entity: &mut T) {
    component_mut::<Positioned, _>(entity).position.1 += 1;
}


// ECS: autogenerated section //

pub struct GravitySystem {
    players: Vec<Player>,
    ghosts: Vec<Ghost>,
}

impl GravitySystem {
    pub fn new() -> Self {
        Self {
            players: vec![],
            ghosts: vec![]
        }
    }

    pub fn update(&mut self) {
        for player in &mut self.players {
            gravitate_down(player);
        }

        for ghost in &mut self.ghosts {
            gravitate_down(ghost);
        }
    }
}

// TODO pointer to entity to register in multiple systems
impl CanRegister<Player> for GravitySystem {
    fn register(&mut self, entity: Player) {
        self.players.push(entity);
    }
}

impl CanRegister<Ghost> for GravitySystem {
    fn register(&mut self, entity: Ghost) {
        self.ghosts.push(entity);
    }
}
